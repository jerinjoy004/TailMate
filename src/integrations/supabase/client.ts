// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://cfbeaktbdnnyndgfucfq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNmYmVha3RiZG5ueW5kZ2Z1Y2ZxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE4MzA5NTcsImV4cCI6MjA1NzQwNjk1N30.aDdSaju2t3DOU5TXCMRN0iM-qDs6zXkeijTNbF1dZSE";

// Configure client with better performance options
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
    },
    global: {
      headers: {
        'Cache-Control': 'public, max-age=300',
      },
      fetch: (url, options) => {
        // Use AbortController to implement timeouts
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout
        
        const fetchOptions = {
          ...options,
          signal: controller.signal,
        };
        
        return fetch(url, fetchOptions)
          .finally(() => clearTimeout(timeoutId));
      },
    },
    realtime: {
      timeout: 30000, // 30 second timeout
    },
  }
);

// Cache for frequently accessed data
const cache = new Map<string, { data: any, timestamp: number }>();
const CACHE_TTL = 5 * 60 * 1000; // 5 minutes in milliseconds

// Get data with caching
export const getCachedData = async (
  table: string, 
  query: any, 
  cacheKey: string, 
  ttl = CACHE_TTL
): Promise<any> => {
  const now = Date.now();
  const cachedResult = cache.get(cacheKey);
  
  if (cachedResult && now - cachedResult.timestamp < ttl) {
    return cachedResult.data;
  }
  
  const result = await query;
  
  if (!result.error) {
    cache.set(cacheKey, { data: result, timestamp: now });
  }
  
  return result;
};

// Define and export helper functions for storage URLs
export const getStorageUrl = (bucketName: string, filePath: string) => {
  return `${SUPABASE_URL}/storage/v1/object/public/${bucketName}/${encodeURIComponent(filePath)}`;
};

// Helper function to upload files to storage
export const uploadFile = async (
  bucket: string,
  filePath: string,
  file: File
): Promise<string | null> => {
  try {
    console.log('Uploading file to path:', filePath);
    
    const { data: uploadData, error: uploadError } = await supabase
      .storage
      .from(bucket)
      .upload(filePath, file, {
        cacheControl: '3600',
        upsert: true // Allow overwriting files
      });

    if (uploadError) {
      console.error('Upload error:', uploadError);
      return null;
    }

    // Get public URL using Supabase's getPublicUrl method
    const { data: { publicUrl } } = supabase
      .storage
      .from(bucket)
      .getPublicUrl(filePath);

    console.log('File uploaded successfully, URL:', publicUrl);
    return publicUrl;
  } catch (error) {
    console.error('File upload error:', error);
    return null;
  }
};

// Add manual type definition for donation_requests table
// This is needed until the types file is regenerated
declare module '@supabase/supabase-js' {
  interface Database {
    public: {
      Tables: {
        donation_requests: {
          Row: {
            id: string;
            user_id: string;
            title: string;
            description: string;
            amount: number;
            created_at: string;
            fulfilled: boolean;
          };
          Insert: {
            id?: string;
            user_id: string;
            title: string;
            description: string;
            amount: number;
            created_at?: string;
            fulfilled?: boolean;
          };
          Update: {
            id?: string;
            user_id?: string;
            title?: string;
            description?: string;
            amount?: number;
            created_at?: string;
            fulfilled?: boolean;
          };
        }
      }
    }
  }
}
